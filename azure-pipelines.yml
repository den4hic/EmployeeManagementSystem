trigger:
- master

pool:
  name: 'Default'
  demands:
    - agent.name -equals SelfHostedAgent

variables:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  solution: '**/*.sln'
  publishDir: '$(Build.ArtifactStagingDirectory)/drop'
  dacpacFile: '**/*.dacpac'
  uiProjectPath: 'UI'
  uiPublishDir: '$(Build.ArtifactStagingDirectory)/ui'
  terraformProjectPath: 'terraform'

stages:
  - stage: Backend
    displayName: 'Build and Publish Backend'
    jobs:
      - job: BuildBackend
        displayName: 'Build and Publish .NET Core Backend'
        steps:
          - task: NuGetToolInstaller@1

          - task: DotNetCoreCLI@2
            inputs:
              command: 'restore'
              projects: '$(solution)'

          - task: VSBuild@1
            inputs:
              solution: '$(solution)'
              msbuildArgs: '/p:Configuration=Release /p:Platform="Any CPU"'
              platform: '$(buildPlatform)'
              configuration: '$(buildConfiguration)'

          - task: DotNetCoreCLI@2
            inputs:
              command: 'publish'
              projects: '$(solution)'
              arguments: '--configuration $(buildConfiguration) --output $(publishDir)'

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              Contents: '$(dacpacFile)'
              TargetFolder: '$(publishDir)'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(publishDir)/WebAPI.zip'
              ArtifactName: 'WebAPI'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(publishDir)/ProjectDatabase/bin/Release/ProjectDatabase.dacpac'
              ArtifactName: 'ProjectDB'

  - stage: Frontend
    displayName: 'Build and Publish UI'
    jobs:
      - job: BuildUI
        displayName: 'Build and Publish Angular UI'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'

          - task: Npm@1
            displayName: 'Install Angular dependencies'
            inputs:
              command: 'install'
              workingDir: '$(System.DefaultWorkingDirectory)/$(uiProjectPath)'

          - task: Npm@1
            displayName: 'Build Angular'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)/$(uiProjectPath)'
              customCommand: 'run build'

          - task: ArchiveFiles@2
            displayName: 'Archive Angular files'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/$(uiProjectPath)/dist'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(uiPublishDir)/UI.zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Angular artifacts'
            inputs:
              PathtoPublish: '$(uiPublishDir)/UI.zip'
              ArtifactName: 'UI'
  - stage: Terraform
    displayName: 'Validate and Publich Terraform'
    jobs:
      - job: BuildTerraform
        steps:
          - task: TerraformTaskV4@4
            displayName: Tf init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'Azure subscription 1 (3ec5c0ac-5b6f-4a11-9982-b335e0ba3b94)'
              backendAzureRmResourceGroupName: 'employee-system-rg'
              backendAzureRmStorageAccountName: 'employeesystemstorage'
              backendAzureRmContainerName: 'prod-tfstate'
              backendAzureRmKey: 'prod.terraform.tfstate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(terraformProjectPath)'
          - task: TerraformTaskV4@4
            displayName: Tf validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
          - task: TerraformTaskV4@4
            displayName: Tf format
            inputs:
              provider: 'azurerm'
              command: 'custom'
              outputTo: 'console'
              customCommand: 'fmt'
              environmentServiceNameAzureRM: 'Azure subscription 1 (3ec5c0ac-5b6f-4a11-9982-b335e0ba3b94)'
          - task: TerraformTaskV4@4
            displayName: Tf plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(terraformProjectPath)'
              environmentServiceNameAzureRM: 'Azure subscription 1 (3ec5c0ac-5b6f-4a11-9982-b335e0ba3b94)'
          - task: ArchiveFiles@2
            displayName: Archive files
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              replaceExistingArchive: true
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: '$(Build.BuildId)-build'
